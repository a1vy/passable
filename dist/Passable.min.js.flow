// @flow

import {version} from "../version.json";
import {WARN, FAIL} from "./result_object";
import validate from "./validate";

// Rules:
declare type Rule = (value: mixed, ...args: Array<mixed>) => Rules;
declare type Compound = (Group: { [ruleName: string]: mixed }) => Rules;
declare class Rules {
  isArray: Rule,
  isNumber: Rule,
  isString: Rule,
  matches: Rule,
  inside: Rule,
  isEmpty: Rule,
  largerThan: Rule,
  smallerThan: Rule,
  smallerThanOrEquals: Rule,
  largerThanOrEquals: Rule,
  sizeEquals: Rule,
  allOf: Compound,
  anyOf: Compound,
  noneOf: Compound
}

declare class Result {
  failCount: number;
  hasValidationErrors: boolean;
  hasValidationWarnings: boolean;
  name: string;
  skipped: Array<string>;
  testCount: number;
  testsPerformed: {[name: string]: {failCount: number, testCount: number, warnCount: number}};
  validationErrors: {[name: string]: Array<string>};
  validationWarnings: {[name: string]: Array<string>};
  warnCount: number;
  getErrors(fieldName: string): Array<string> | {[name: string]: Array<string>};
  getWarnings(fieldName: string): Array<string> | {[name: string]: Array<string>};
}

declare type Severity = 'warn' | 'fail';
declare type TestFn = (fieldName: string, statement: string, test: () => void, severity: Severity) => void;
declare type Specific = ?(Array<string> | string | { not: Array<string> | string, only: Array<string> | string });

declare module "passable" {

  declare export function validate(statement: string, test: () => void): {
    message: ?string,
    valid: boolean
  };

  declare export Enforce: typeof Enforce;
  declare export function enforce(value: mixed): Rules;
  declare function passable(name: string, tests: (test: TestFn) => void, specific: Specific): Result;
  declare export default typeof passable;
}
