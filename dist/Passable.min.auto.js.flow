// @flow

import {version} from "../version.json";
import {WARN, FAIL} from "./result_object";
import validate from "./validate";
import Enforce, {enforce} from "./Enforce";
import Passable from "./Passable";

declare class Result {
  failCount: number;
  hasValidationErrors: boolean;
  hasValidationWarnings: boolean;
  name: string;
  skipped: Array<string>;
  testCount: number;
  testsPerformed: {[name: string]: {failCount: number, testCount: number, warnCount: number}};
  validationErrors: {[name: string]: Array<string>};
  validationWarnings: {[name: string]: Array<string>};
  warnCount: number;
  fail(fieldName: string, statement: string, severity: Severity): Result | mixed;
  getErrors(fieldName: string): Array<string> | {[name: string]: Array<string>};
  getWarnings(fieldName: string): Array<string> | {[name: string]: Array<string>};
}

declare type Severity = 'warn' | 'fail';
declare type TestFn = (fieldName: string, statement: string, test: () => void, severity: Severity) => void;
declare type Specific = ?void | Array<string> | string | { not: Array<string> | string, only: Array<string> | string };
declare export default function(name: string, tests: (test: TestFn) => void, specific: Specific): Result;

